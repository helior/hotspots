<?php

/**
 * @file
 */

/**
 * TODOS:
 * - Support Responsive Image library (make it configurable to disable)
 * - Use Link module to validate URL
 * - Validate that required number of coordinates match HTML spec (https://www.w3.org/wiki/HTML/Elements/area)
 * - Put field descriptions in each form element that merits explanation.
 * - Hide field form and display a warning when there are no image fields to associate with.
 * - Trim & Validate coordinates to be numeric, and comma-separated
 * - Hook API file.
 * - Style fields with 2-column layout
 */

include_once 'hotspots.field.inc';

/**
 * Implements hook_field_attach_view_alter().
 */
function hotspots_field_attach_view_alter(&$output, $context) {
  $fields = hotspots_hotspot_field_map();

  foreach ($fields as $field_name => $field_map) {
    // Drop out of loop if current entity does not match the entities the field
    // is attached to or if the field is not attached to this bundle.
    if (!isset($field_map['bundles'][$context['entity_type']]) || !isset($context['entity']->{$field_name})) {
      continue;
    }

    if (isset($output[$field_name])) {
      foreach (element_children($output[$field_name]) as $delta) {
        $map = $output[$field_name][$delta];
        if (isset($output[$map['#hotspots_field_name']][$map['#hotspots_field_delta']])) {
          $output[$map['#hotspots_field_name']][$map['#hotspots_field_delta']]['#item']['attributes']['usemap'] = '#' . $map['#hotspots_id'];
        }
      }
    }
  }
}

/**
 * Implements hook_hotspots_image_types().
 */
function hotspots_hotspots_image_types() {
  return array('image');
}

/**
 * Implements hook_library().
 */
// function hotspots_library() {
//   $library_path = hotspots_get_library_path();

//   $info['image-map-resizer'] = array(
//     'title' => 'Image Map Resizer',
//     'website' => CHOSEN_WEBSITE_URL,
//     'version' => '1.1.0',
//     'js' => array(
//       $library_path . '/chosen.jquery.min.js' => array('group' => 'JS_LIBRARY'),
//     ),
//   );
//   if (variable_get('chosen_use_theme', TRUE)) {
//     $info['chosen']['css'] = array($library_path . '/chosen.css' => array());
//   }

//   // All the settings that are actually passed through into the chosen()
//   // function are contained in this array.
//   $options = array(
//     'disable_search' => (bool) variable_get('chosen_disable_search', FALSE),
//     'disable_search_threshold' => (int) variable_get('chosen_disable_search_threshold', 0),
//     'search_contains' => (bool) variable_get('chosen_search_contains', FALSE),
//     'placeholder_text_multiple' => variable_get('chosen_placeholder_text_multiple', t('Choose some options')),
//     'placeholder_text_single' => variable_get('chosen_placeholder_text_single', t('Choose an option')),
//     'no_results_text' => variable_get('chosen_no_results_text', t('No results match')),
//     'inherit_select_classes' => TRUE,
//   );

//   $module_path = drupal_get_path('module', 'chosen');
//   $info['drupal.chosen'] = array(
//     'title' => 'Drupal Chosen integration',
//     'website' => 'https://drupal.org/project/chosen',
//     'version' => '1.1.0',
//     'js' => array(
//       $module_path . '/chosen.js' => array(
//         'group' => JS_DEFAULT,
//         'weight' => 100,
//       ),
//       array(
//         'data' => array(
//           'chosen' => array(
//             'selector' => variable_get('chosen_jquery_selector', 'select:visible'),
//             'minimum_single' => (int) variable_get('chosen_minimum_single', 20),
//             'minimum_multiple' => (int) variable_get('chosen_minimum_multiple', 20),
//             'minimum_width' => (int) variable_get('chosen_minimum_width', 200),
//             'options' => $options,
//           ),
//         ),
//         'type' => 'setting',
//       ),
//     ),
//     'css' => array(
//       $module_path . '/css/chosen-drupal.css' => array(),
//     ),
//     'dependencies' => array(
//       array('system', 'jquery.once'),
//       array('chosen', 'chosen'),
//     ),
//   );

//   return $info;
// }

/**
 * Collects all identified image field types().
 *
 * @see hook_hotspots_image_types().
 *
 * @return array
 *   A list of image field types.
 */
function hotspots_get_image_types() {
  $image_types = &drupal_static(__FUNCTION__);

  if (!isset($image_types)) {
    if ($cache = cache_get('hotspots_image_types', 'cache')) {
      $image_types = $cache->data;
    }
    else {
      $image_types = array();
      foreach (module_implements('hotspots_image_types') as $module) {
        $module_types = module_invoke($module, 'hotspots_image_types');
        $image_types = array_merge($image_types, $module_types);
      }

      array_unique($image_types);
      cache_set('hotspots_image_types', $image_types);
    }
  }

  return $image_types;
}

/**
 * Get field maps for just hotspot fields.
 *
 * @see field_info_field_map().
 *
 * @return array
 */
function hotspots_hotspot_field_map() {
  return array_filter(field_info_field_map(), '_hotspots_array_filter_hotspot_fields');
}

/**
 * Get field maps for what the Hotspots module considers an image field.
 *
 * @see field_info_field_map().
 *
 * @return array
 */
function hotspots_image_field_map() {
  return array_filter(field_info_field_map(), '_hotspots_array_filter_image_fields');
}

/**
 * Get the location of the image-map-resizer library.
 *
 * @return
 *   The location of the library, or FALSE if the library isn't installed.
 */
function hotspots_get_library_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('image-map-resizer');
  }

  // The following logic is taken from libraries_get_libraries()
  $searchdir = array();

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory.
  $searchdir[] = 'profiles/' . drupal_get_profile() . '/libraries';

  // Always search sites/all/libraries.
  $searchdir[] = 'sites/all/libraries';

  // Also search sites/<domain>/*.
  $searchdir[] = conf_path() . '/libraries';

  foreach ($searchdir as $dir) {
    if (file_exists($dir . '/image-map-resizer/js/imageMapResizer.min.js')) {
      return $dir . '/image-map-resizer';
    }
  }

  return FALSE;
}

/**
 * array_filter() helper for hotspots_hotspot_field_map().
 */
function _hotspots_array_filter_hotspot_fields($field) {
  return $field['type'] == 'hotspot';
}

/**
 * array_filter() helper for hotspots_image_field_map().
 */
function _hotspots_array_filter_image_fields($field) {
  $image_types = hotspots_get_image_types();
  return in_array($field['type'], $image_types);
}
