<?php

/**
 * @file
 */

/**
 * TODOS:
 * - Support Responsive Image library (make it configurable to disable)
 * - Use Link module to validate URL
 * - Validate that required number of coordinates match HTML spec (https://www.w3.org/wiki/HTML/Elements/area)
 * - Put field descriptions in each form element that merits explanation.
 * - Hide field form and display a warning when there are no image fields to associate with.
 * - Trim & Validate coordinates to be numeric, and comma-separated
 * - Hook API file.
 * - Style fields with 2-column layout
 */

include_once 'hotspots.field.inc';

/**
 * Implements hook_field_attach_view_alter().
 */
function hotspots_field_attach_view_alter(&$output, $context) {
  $fields = hotspots_hotspot_field_map();

  foreach ($fields as $field_name => $field_map) {
    // Drop out of loop if current entity does not match the entities the field
    // is attached to or if the field is not attached to this bundle.
    if (!isset($field_map['bundles'][$context['entity_type']]) || !isset($context['entity']->{$field_name})) {
      continue;
    }

    if (isset($output[$field_name])) {
      foreach (element_children($output[$field_name]) as $delta) {
        $map = $output[$field_name][$delta];
        if (isset($output[$map['#hotspots_field_name']][$map['#hotspots_field_delta']])) {
          $output[$map['#hotspots_field_name']][$map['#hotspots_field_delta']]['#item']['attributes']['usemap'] = '#' . $map['#hotspots_id'];
        }
      }
    }
  }
}

/**
 * Implements hook_hotspots_image_types().
 */
function hotspots_hotspots_image_types() {
  return array('image');
}

/**
 * Collects all identified image field types().
 *
 * @see hook_hotspots_image_types().
 *
 * @return array
 *   A list of image field types.
 */
function hotspots_get_image_types() {
  $image_types = &drupal_static(__FUNCTION__);

  if (!isset($image_types)) {
    if ($cache = cache_get('hotspots_image_types', 'cache')) {
      $image_types = $cache->data;
    }
    else {
      $image_types = array();
      foreach (module_implements('hotspots_image_types') as $module) {
        $module_types = module_invoke($module, 'hotspots_image_types');
        $image_types = array_merge($image_types, $module_types);
      }

      array_unique($image_types);
      cache_set('hotspots_image_types', $image_types);
    }
  }

  return $image_types;
}

/**
 * Get field maps for just hotspot fields.
 *
 * @see field_info_field_map().
 *
 * @return array
 */
function hotspots_hotspot_field_map() {
  return array_filter(field_info_field_map(), '_hotspots_array_filter_hotspot_fields');
}

/**
 * Get field maps for what the Hotspots module considers an image field.
 *
 * @see field_info_field_map().
 *
 * @return array
 */
function hotspots_image_field_map() {
  return array_filter(field_info_field_map(), '_hotspots_array_filter_image_fields');
}

/**
 * array_filter() helper for hotspots_hotspot_field_map().
 */
function _hotspots_array_filter_hotspot_fields($field) {
  return $field['type'] == 'hotspot';
}

/**
 * array_filter() helper for hotspots_image_field_map().
 */
function _hotspots_array_filter_image_fields($field) {
  $image_types = hotspots_get_image_types();
  return in_array($field['type'], $image_types);
}
