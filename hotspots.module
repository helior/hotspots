<?php

/**
 * @file
 */

/**
 * TODOS:
 * - Each image field reference must render it's own map element
 *   - map name = image source + delta + ID
 *   - area attributes
 * - Style fields with 2-column layout
 * - Use Link module to validate URL
 * - Validate that required number of coordinates match HTML spec (https://www.w3.org/wiki/HTML/Elements/area)
 * - Support Responsive Image library (make it configurable to disable)
 * - Put field descriptions in each form element that merits explanation.
 * - Hook API file.
 * - Rename module to: "Hot Spot", "Image Map",
 * - Hide field form and display a warning when there are no image fields to associate with.
 * - Trim & Validate coordinates to be numeric, and comma-separated
 */

include_once 'hotspots.field.inc';

/**
 * Implements hook_field_attach_view_alter().
 */
function hotspots_field_attach_view_alter(&$output, $context) {
  $fields = hotspots_hotspot_field_map();

  foreach ($fields as $field_name => $field_map) {
    // Drop out of loop if current entity does not match the entities the field is attached to.
    if (!in_array($context['entity_type'], array_keys($field_map['bundles']))) {
      continue;
    }

    // Drop out if the field is not attached to this bundle.
    if (!isset($context['entity']->{$field_name})) {
      continue;
    }

    $lang = $context['entity']->language;

    foreach ($context['entity']->{$field_name}[$lang] as $delta => $field_value) {
      // Drop out if the image we're attaching to doesn't exist. Any other delta
      // here is just as lost.
      if (!isset($output[$field_value['associate_image_field']])) {
        break;
      }

      $identifier = $output[$field_name][$delta]['#id'];
      if (isset($output[$field_value['associate_image_field']][$field_value['associate_image_delta']])) {
        $output[$field_value['associate_image_field']][$field_value['associate_image_delta']]['#item']['attributes']['usemap'] = $identifier;
      }
    }
  }
  // Get field names of imagemap type;
  // Get field instance config of those fields.
  // iterate over instance config, match context with entity type & field on entity.
  // iterate over deltas of imagemap field
  // search for "attach_to" field on entity.
  // If exists, get ID attribute of current imagemap, attach to the matching delta of image attributes on $output array.
}

/**
 * Implements hook_hotspots_image_types().
 */
function hotspots_hotspots_image_types() {
  return array('image');
}

function hotspots_hotspot_field_map() {
  return array_filter(field_info_field_map(), '_hotspots_array_filter_hotspot_fields');
}

function hotspots_image_field_map() {
  return array_filter(field_info_field_map(), '_hotspots_array_filter_image_fields');
}

function _hotspots_array_filter_hotspot_fields($field) {
  return $field['type'] == 'hotspot';
}

function _hotspots_array_filter_image_fields($field) {
  $image_types = hotspots_get_image_types();
  return in_array($field['type'], $image_types);
}

/**
 * Collects all identified image field types().
 *
 * @see hook_hotspots_image_types().
 *
 * @return array
 *   A list of image field types.
 */
function hotspots_get_image_types() {
  $image_types = &drupal_static(__FUNCTION__);

  if (!isset($image_types)) {
    if ($cache = cache_get('hotspots_image_types', 'cache')) {
      $image_types = $cache->data;
    }
    else {
      $image_types = array();
      foreach (module_implements('hotspots_image_types') as $module) {
        $module_types = module_invoke($module, 'hotspots_image_types');
        $image_types = array_merge($image_types, $module_types);
      }

      array_unique($image_types);
      cache_set('hotspots_image_types', $image_types);
    }
  }

  return $image_types;
}
